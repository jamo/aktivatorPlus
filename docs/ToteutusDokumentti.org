Toteutusdokumentti

HUOM. Tämä sama tiedosto on useammassa formaatissa. Tarkoituksena on lukea .html versiota tästä tiedostosta. 


* JOHDANTO (1)

** Järjestelmän tarkoitus
  Järjestelmän käyttötarkoituksena on toteuttaa esimerkiksi kurssikyselyitä,
  joihin tässä tapauksessa opiskelijat voivat nopeasti vastata,  näin saadaan hyödyllistä tietoa esim. kurssin tehtävien vaikseustasosta.
  Tavoitteena on toteuttaa järjestelmä, jolla voi kyselyitä, joihin vastaamiseen ei mene yli minuuttia.

** Toimintaympäristö
   - Missä laite ja ohjelmistoympäristössä järjestelmän on tarkoitus toimia.
   - Sovellus toimii RoR ympäristoissä, joissa tuotantotietokanta on postgresql ja kehitystietokanta on sqlite3. Nämä on helppo muuttaa.
   - Sovellus toimii myös suoraan herokuun deployattuna.
   - Ainakin  ruby 1.9.2-p290llä ja rails 3.2.2llä sovellus toimii moitteetta. Teoriassa pitäisi toimia myös muilla rubyn versioilla

** Toteutusympäristö
   - Ruby kielellä, Ruby on Rails frameworkkia käyttäen ja deployaus herokuun.



* OHJELMISTON RAKENNE (2)
[[file:OhjelmistonYleisrakennesivukaavioTSOHA.png]]

* JÄRJESTELMÄN KOMPONENTIT (3)
#+OPTIONS: ^:nil
#Jotta _-merkit oikein
** Tarkat kuvaukset oleellisimmista tiedoista
**** assets
*****   images
******      rails.png
: Railsissa valmiina oleva kuva, perjaatteessa turha deployatussa sovelluksessa
*****    javascripts
: Kontrollerikohtaiset javascript tiedostot, tyhjiä mutta rails luo ne valmiiksi
******     admin.js.coffee
******     answer_options.js.coffee
******     answers.js.coffee
******     application.js
******     comments.js.coffee
******     courses.js.coffee
******     hoverIntent.js
******     jquery-1.2.6.min.js
******     jquery.bgiframe.min.js
******     questions.js.coffee
******     sessions.js.coffee
******     superfish.js
******     supersubs.js
******      users.js.coffee
*****     stylesheets
: Kontrollerikohtaiset css tiedostot
******        admin.css.scss
******        answer_options.css.scss
******        answers.css.scss
******        application.css
:  Kaikille tarkoitettu css tiedosto, johon koottuna käytännössa kaikkiin näkymiin vaikuttavat näkymät
******        comments.css.scss
******        courses.css.scss
******        questions.css.scss
******        scaffolds.css.scss
******        sessions.css.scss
******        users.css.scss
****   controllers
: Eri näkymien kontrollerit
*****    admin_controller.rb
: Admin näkymän kontrolleri
: Vastaa:
:  -admin näkymästä, eli kurssien, kysymysten yms. määrien näyttämisestä
*****    answer_options_controller.rb
: Answer_optionssin kontrolleri, joka on tyhjä, mutta answerolioiden olemassaolon takia tarvitaan
: Ei tee oikeastaan mitään.
*****    answers_controller.rb
: Vastaus näkymän kontrolleri. Tarjoaa uuden vastauksen luonnin
: Vastaa: 
:  -Uuden vastauksen luonnista tietokantaan ja on vastaussivun taustalla
*****    application_controller.rb
: Koko sovelluksen yhteinen kontrolleri,
: Vastaa:
:  -Kirjautumiseen pakottava before_filter
:  -kirjautumisen hoitava authorize-metodi
*****    comments_controller.rb
: Kommenttien näyttämiseen liittyvä kontrolleri
: Vastaa:
:  -Kysymykseen liittyvien kommenttien näyttämisestä
*****    courses_controller.rb
: Kurssi näkymän kontrolleri, uuden kurssin luonti, muokkaus ja poisto
: Vastaa:
:  -Uuden kurssin luonnista 
:  -Kurssin muokkaamisesta
:  -Kurssin poistamisesta
:  -Kurssin poistamisesta
*****    questions_controller.rb
: Kysymysten kontrolleri, kysymyksen luonti, muokkaus, poisto
: Vastaa:
:  -Uuden kysymyksen luonnista
:  -Kysymyksen poistamisesta
:  -Kysymyksen aktivoinnista
:  -Kysymyksen näyttämisestä
*****    sessions_controller.rb
: Sessioiden kontrolleri, hoitaa autentikaation
: Vastaa:
:  -Käyttäjän kirjaamisesta sisään ja ulos
*****    users_controller.rb
: Käyttäjiin liittyvä kontrolleri
: Vastaa:
:  -Uuden käyttäjän luomisesta
:  -Käyttäjän tietojen muokkaamisesta
:  -Käyttäjän poistamisesta
****   helpers
: Helper luokkia, tyhjää täynnä. Rails luo ne jos niitä vaikka tarvitsisi
*****    admin_helper.rb
*****    answer_options_helper.rb
*****    answers_helper.rb
*****    application_helper.rb
*****    comments_helper.rb
*****    courses_helper.rb
*****    questions_helper.rb
*****    sessions_helper.rb
*****    users_helper.rb
****   mailers
:  Jos lähettäisi sähköpostia, tulisi ne tänne. Tässä ohjelmassa tyhjä.
****   models
:  Mallit, joiden perusteella rails rakentaa tietokantaan riippuvuuksia ja koodiin helpottavia asioita
*****    answer_option.rb
: Kuvaa vastausvaihtoehtojen suhteita muihin tietokantaelemntteihin
*****    answer.rb
: Kuvaa vastausten suhteita muihin tietokantaelemntteihin
*****    comment.rb
: Kuvaa kurssien suhteita muihin tietokantaelemntteihin
*****    course.rb
: Kuvaa kurssien suhteita muihin tietokantaelemntteihin
*****    question.rb
: Kuvaa kysymysten suhteita muihin tietokantaelemntteihin
*****    user.rb
: Kuvaa käyttäjien suhteita muihin tietokantaelemntteihin
****   views
: Kaikki näkymät ovat generoituja. Kaikkien ulkoasuun vaikuttaa kontrollien tulokset
*****       admin
******       index.html.erb
: Adminin index näkymä, näyttää kurssien, kysyysten, kommenttejen, vastausten ja vastausvaihtoehtojen määrän tietokannassa
******       answer_options
: Kansio Answer_optionien olemassaolon takia

*****       answers
******        new.html.erb
: Uuden vastauksen
: Sis. answer_option id:n ja kommentin, jotka päätyvät vastaukseen
******        show.html.erb
: Kysymyksen vastausvaihtoehtojen listaus
: Ja linkki uuden vastauksen antamiseen. Sivu melko turha.
*****       comments
******         index.html.erb
: Kurssin yhden kykymyksen kommenttien listaus
*****       courses
******        comments.html.erb
: Kurssin kaikkien kommenttien listaus kurssikohtaisesti
******        edit.html.erb
: Kurssin nimen muokkaus, hyödyntää _form.html.erb tiedostoa
******        _form.html.erb
: Kurssin luonnissa käytetty formi, jossa vain kurssin nimelle kenttä
******        index.html.erb
: Näyttää listauksen kursseista ja linkin uuden kurssin luonti sivulle
******         new.html.erb
: Näyttää -form.html.erb tiedoston sisällön
*****       layouts
******        application.html.erb
: Pohja, jonka ympärille sivu rakentuu. Renderöi navigaatiopalkin ja määritteleen css ja javascript tiedostojen käytän
******        _navi.html.erb
: Navigaationäkymä, joka ei enää ole käytössä
*****       questions
******        activate.html.erb
: Kysymyksen aktivointia varten oleva näkymä, joka on käytännössä tyhjä, sillä näkymän kontrollerin metodi redirectaa heti posi sivulta
******        edit.html.erb
: Turha näkymä, jota käytettiin aikanaan kysymyksen muokkaukseen.
******        _form.html.erb
: Näkymä, jolla luodaan uusi kysymys. Sisältää kysymyksen 'nimen' ja tässä vaiheessa 20kpl vastausvaihtoidoille tarkoitettua kenttää
******        index.html.erb
: Näkymä, joka listaa kaikki kysymykset. Jos käyttäjä ei kirjautnut listaa vain aktiiviset kysymykset
******        new.html.erb
: Näkymä joka näyttää _form.hml.erb tiedoston sisällön ja jolla luodaan uusi kysymys
******        show.html.erb
: Näyttää kysymyksen tuloksen, piirakkakaavion tuloksista ja kysymyksen kommentit (vain kirjautuneille)
*****       sessions
******        create.html.erb
: Tyhjä railsin takia olemassa oleva näkymä, jota sisäänkirjautuminen vaatii
******        destroy.html.erb
: Logout näkymä, tuhoaa session ja kirjaa siten käyttäjän ulos
******        new.html.erb
: Kirjautumis ikkuna, Käyttäjänimelle kenttä, Salasanalle
: Sessions.rb modelissa on syötteiden tarkistus
*****       users
******        edit.html.erb
: Käyttäjän tietojen editointi, näyttää _form.html.erb tiedoston
******        _form.html.erb
: Käyttäjää luotaessa ja muokattaessa näytettävä tiedosto, sis Käyttäjänimen, salasana ja salasanan varmistus kentät.
: Users.rb model huolehtii salasanan hashaamisesta, ja syötteen oikeellisuudesta
: Tarkistetaan käyttäjän nimen uniikkisuus
******        index.html.erb
: Listaa käyttäjät
******        makeAdmin.html.erb
: Näkymä käyttäjän oikeuksien muokauksen takia. kukaan ei koskaan tule tätä näkemään
******        new.html.erb
: Näyttää _form.html.erb näkymän uuden käyttäjän luonnin takia
******        show.html.erb
: Näyttää käyttäjän tiedot, ja tiedon, onko käytttäjä admin.
** Muiden tiedostojen pääosin suppeampi selostus
***** config
: konfiguraatio tiedostoja
****** navigation.rb
: Navigaatiopalkin gem:in konfiguraatio
****** routes.rb
: Luokkien keskenäinen hierarkia ja nettisivujen osoitteiden luonti ja mappaus
***** config.ru
: Tätä rake käyttää käynnistäessään tämän sovelluksen
***** db
: Tietokantaan liittyviä tiedostoja
****** schema.rb
: sisältää railsin käsityksen tietokannasta
****** migrate
: Migraatio tiedostot, joiden perusteella Rails rakentaa tietokannan
***** doc
: Railsin luoma kansio, jossa ei mitään tärkeää
***** docs
: Kansio, jossa tämäkin filu on. Sisältää kaiken dokumentaation
***** Gemfile
: Tiedosto, joka määrittelee, mitä gem:ejä on käytössä
***** Gemfile.lock
: Lukkotiedosto ylläolevalle
***** lib
: Railsin luoma tyhjä kansio
***** log
: lokitiedostoja
***** public
: kansio, jossa esim. 404.html filut, Railsin luomia
***** Rakefile
: Rake -komennon käyttäm tiedosto
***** README.org
: Readme filu
***** ruby_README.rdoc
: Railsin oma README
***** script
: Railsin omia tiedostoja
***** spec
: Railsin luomia tiedostoja, testaamista varten
***** test
: Railsin luoma kansio testeille
***** tmp
: Nimi kuvannee kaiken
***** TODO
: oma TODO tiedosto
***** vendor
: Railsin omia tiedostoja
* ASENNUSTIEDOT (4)
  Repon kloonauksen/kun palautettu zippi on purettu jälkeen tulee suorittaa
: bundle install
  Tämä ei onnistu, mikäli koneesta puuttuu jokin sovelluksen käyttämä komponentti (perus ubuntu 12.04  + ruby 1.9.1p290 toimii + sqlite3 / postgresql )
: rake db:migrate
  Luo tietokannan
: rails server
  Saa sovelluksen pyörimään kehitys moodissa. On palvelin kohtaista, miten sovelluksen saa pyörimään omalla koneellaan production moodissa, joten sitä ei käsitellä.

  Sovelluksen deployaus herokuun onnistuu helpoisti, oletten että herokuun tarvittava sovellus on koneella ja että sinulla on tunnukset herokuun
: heroku create --stack cedar
: git push heroku mastet
: heroku run rake db:migrate
  Nyt sovellus on asennettu herokuun, mutta siinä ei ole vielä käyttäjiä
  
  Voit luoda käyttäjän joko seesdin avulla:
: heroku run rake db:seed

  Tai vaihtoehtoisesti konsolilla
: rails run console
: User.new(:name => 'admin', :password => 'admin', :administrator => true).save!
: exit
  
  Nyt sovellukseen voi kirjautua, lisäämällä kirjoittamalla osoitteen perään '/login'
: ror.oroite.tld/login
  Kirjautumiselle ei ole painiketta, jotta anonyymeihin kyselyihin vastaavat eivät edes pohtisi, pitääkö järjestelmään kirjautua. 
  Ja sovellukseen kirjautuvia käyttäjiä on vain muutama, niin  
* KÄYNNISTYS / KÄYTTÖOHJE
  sovellus löytyy herokusta osoitteesta http://radiant-flower-3080.herokuapp.com, kirjautuminen tapahtuu osoitteessa  http://radiant-flower-3080.herokuapp.com/login
  Tunnuksina tässä 'admin' ja salasana 'admin'
  
  Testisovelluksessa ei ole mitään tärkeää, joten sen kanssa voi kokeilla kaikkea, sis. SQL injektiot. Jos niitä löytyy, ilmoitathan siitä minulle. Myös kannan rakentaminen uudestaan on helppoa ja nopeaa.
